#!/usr/bin/env python
# -*- coding: utf-8 -*-
import cv2
from fgs_opt_from_scratch import (
        models, optimizers, updaters, plotters)
import yaml
from sys import exit, argv

if __name__ == '__main__':
    if len(argv) != 3:
        print('usage: rosrun fgs_opt_from_scratch optimize config_path data_path')
        exit(-1)

    with open(argv[1], 'r') as f:
        config_dict = yaml.load(f)

    # データ
    cv_yaml = cv2.FileStorage(argv[2], cv2.FileStorage_READ)
    data = cv_yaml.getNode('data').mat()

    # モデル
    model = models.create(config_dict['model'])
    model.update(config_dict['init_param'])

    # パラメータ更新器
    updater = updaters.create(config_dict['updater'])

    # 最適化処理クラス
    optimizer = optimizers.create(model, data, updater, config_dict['optimizer'])

    # 描画クラス(optional)
    plotter = None
    if 'plotter' in config_dict and config_dict['plotter']:
        plotter = plotters.create(config_dict['plotter'], model, data)

    # 1周期毎に停止(optional)
    once = False
    if 'once' in config_dict and config_dict['once']:
        once = config_dict['once']

    print('initial param               : {}'.format(model.get_param()))
    print('initial error of sum squares: {}'.format(optimizer.ess()))

    print('optimize...')

    previous_num = 0
    num_iteration = 0
    while True:
        if plotter:
            plotter.plot()
        if once:
            try:
                input()
            except:
                pass
        num_iteration = optimizer.optimize(once=once)
        if previous_num == num_iteration:
            break
        previous_num = num_iteration


    print('num of iteration          : {}'.format(num_iteration))
    print('final param               : {}'.format(model.get_param()))
    print('final error of sum squares: {}'.format(optimizer.ess()))
    try:
        input('\npress enter to terminate')
    except:
        pass
